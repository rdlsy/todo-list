{"version":3,"sources":["TodoContext.js","components/TodoCreate.js","components/TodoHead.js","components/TodoItem.js","components/TodoList.js","components/TodoTemplate.js","App.js","reportWebVitals.js","index.js"],"names":["initialTodos","id","text","done","todoReducer","state","action","type","concat","todo","map","filter","Error","TodoStateContext","createContext","TodoDispatchContext","TodoNextIdContext","TodoProvider","children","useReducer","dispatch","nextId","useRef","Provider","value","useTodoState","context","useContext","useTodoDispatch","CircleButton","styled","button","props","open","css","InsertFormPositioner","div","InsertForm","form","Input","input","TodoCreate","useState","setOpen","setValue","useTodoNextId","onSubmit","e","preventDefault","current","placeholder","autoFocus","onChange","target","onClick","React","memo","TodoHeadBlock","TodoHead","undoneTasks","today","Date","dateString","toLocaleDateString","year","month","day","dayName","weekday","className","length","Remove","CheckBox","Text","Modify","TodoItemBlock","TodoItem","selectedTodo","setSelectedTodo","onUpdate","TodoListBlock","TodoList","todos","TodoTemplateBlock","TodoTemplate","GlobalStyle","createGlobalStyle","App","data-name","xmlns","viewBox","d","transform","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fe62cc5f.chunk.js","sourcesContent":["import React, { useReducer, createContext, useContext, useRef } from 'react';\n\nconst initialTodos = [\n  {\n    id: 1,\n    text: '에비추 1화 보기',\n    done: true,\n  },\n  {\n    id: 2,\n    text: '에비추 2화 보기',\n    done: true,\n  },\n  {\n    id: 3,\n    text: '에비추 3화 보기',\n    done: false,\n  },\n  {\n    id: 4,\n    text: '에비추 4화 보기',\n    done: false,\n  }\n];\n\nfunction todoReducer(state, action) {\n  switch (action.type) {\n    case 'CREATE':\n      return  state.concat(action.todo);\n    case 'TOGGLE':\n      return state.map(todo => todo.id === action.id ? { ...todo, done: !todo.done } : todo);\n    case 'REMOVE':\n      return state.filter(todo => todo.id !== action.id);\n    case 'UPDATE':\n      return state.map(todo => todo.id === action.id ? { ...todo, text: action.text } : todo);\n    default:\n      throw new Error(`Unhandled action type: ${action.type}`);  \n  }\n}\n\nconst TodoStateContext = createContext();\nconst TodoDispatchContext = createContext();\nconst TodoNextIdContext = createContext();\n\nexport function TodoProvider({ children }) {\n  const [state, dispatch] = useReducer(todoReducer, initialTodos);\n  const nextId = useRef(5);\n\n  return (\n    <TodoStateContext.Provider value={state}>\n      <TodoDispatchContext.Provider value={dispatch}>\n        <TodoNextIdContext.Provider value={nextId}>\n          {children}\n        </TodoNextIdContext.Provider>\n      </TodoDispatchContext.Provider>\n    </TodoStateContext.Provider>\n  );\n}\n\nexport function useTodoState() {\n  const context = useContext(TodoStateContext);\n  if (!context) {\n    throw new Error('Cannot find TodoProvider');\n  }\n  return context;\n}\n\nexport function useTodoDispatch() {\n  const context = useContext(TodoDispatchContext);\n  if (!context) {\n    throw new Error('Cannot find TodoProvider');\n  }\n  return context;\n}\n\nexport function useTodoNextId() {\n  const context = useContext(TodoNextIdContext);\n  if (!context) {\n    throw new Error('Cannot find TodoProvider');\n  }\n  return context;\n}","import React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { MdAdd } from 'react-icons/md';\nimport { useTodoDispatch, useTodoNextId } from '../TodoContext';\n\nconst CircleButton = styled.button`\n  background: #ff5769;\n  &:hover {\n    background: #fd7685;\n  }\n  &:active {\n    background: #f93c4f;\n  }\n  position: absolute;\n  right: 35px;\n  top: 96px;\n  padding: 0;\n  width: 60px;\n  height: 60px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  -webkit-border-radius: 50%;\n  border: none;\n  outline: none;\n  font-size: 30px;\n  color: #fff;\n  z-index: 5;\n  cursor: pointer;\n  transition: .125s all ease-in;\n  ${props => props.open && css`\n    background: #5a4fe8;\n    &:hover {\n      background: #7166f4;\n    }\n    &:active {\n      background: #493ced;\n    }\n    transform: rotate(45deg);\n  `}\n  @media only screen and (max-width: 525px) {\n    top: 85px;\n    right: 20px;\n    width: 45px;\n    height: 45px;\n  }\n`;\n\nconst InsertFormPositioner = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n`;\n\nconst InsertForm = styled.form`\n  padding: 40px 30px 25px;\n  height: 127px;\n  background: #fcfcff;\n  border-bottom: 1px solid #dee9f1;\n  border-top-left-radius: 10px; \n  border-top-right-radius: 10px;\n  box-sizing: border-box;\n  @media only screen and (max-width: 525px) {\n    padding: 30px 20px 20px;\n    height: 108px;\n  }\n`;\n\nconst Input = styled.input`\n  padding: 12px;\n  width: 100%;\n  border: 1px solid #dee9f1;\n  border-radius: 4px;\n  outline: none;\n  font-size: 18px;\n  box-sizing: border-box;\n`\n\nfunction TodoCreate() {\n  const [open, setOpen] = useState(false);\n  const [value, setValue] = useState('');\n  const dispatch = useTodoDispatch();\n  const nextId = useTodoNextId();\n\n  const onToggle = () => setOpen(!open);\n  const onChange = e => setValue(e.target.value);\n  const onSubmit = e => {\n    e.preventDefault();\n    dispatch({\n      type: 'CREATE',\n      todo: {\n        id: nextId.current,\n        text: value,\n        done: false\n      }\n    });\n    setValue('');\n    setOpen(false);\n    nextId.current += 1;\n  };\n\n  return (\n    <>\n      {open && (\n        <InsertFormPositioner>\n          <InsertForm onSubmit={onSubmit}>\n            <Input placeholder=\"할 일을 입력 후, Enter 를 누르세요\" autoFocus onChange={onChange} value={value} />\n          </InsertForm>\n        </InsertFormPositioner>\n      )}\n      <CircleButton onClick={onToggle} open={open}>\n        <MdAdd />\n      </CircleButton>\n    </>\n  );\n}\n\nexport default React.memo(TodoCreate);","import React from 'react';\nimport styled from 'styled-components';\nimport { useTodoState } from '../TodoContext';\n\nconst TodoHeadBlock = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 40px 30px 25px;\n  height: 127px;\n  background: #fcfcff;\n  border-bottom: 1px solid #dee9f1;\n  border-top-left-radius: 10px;\n  border-top-right-radius: 10px;\n  box-sizing: border-box;\n\n  h1 {\n    margin: 0;\n    line-height: 1;\n    font-size: 26px;\n    color: #675aff;\n  }\n\n  .month {\n    margin-top: 15px;\n    color: #9b9ab5;\n    font-size: 17px;\n  }\n\n  .task-left {\n    margin-top: 5px;\n    color: #a8a7cd;\n    font-size: 17px;\n    font-weight: bold;\n  }\n  @media only screen and (max-width: 525px) {\n    padding: 30px 20px 20px;\n    height: 108px;\n    h1 {\n      font-size: 22px;\n    }\n    .task-left {\n      font-size: 15px;\n    }\n  }\n`;\n\nfunction TodoHead() {\n  const todos = useTodoState();\n  const undoneTasks = todos.filter(todo => !todo.done);\n  const today = new Date();\n  const dateString = today.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n  const dayName = today.toLocaleDateString('en-US', {\n    weekday: 'long'\n  });\n  return (\n    <TodoHeadBlock>\n      <div className=\"today\">\n        <h1>{dateString}</h1>\n        <div className=\"month\">{dayName}</div>\n      </div>\n      <div className=\"task-left\">{undoneTasks.length} Tasks</div>\n    </TodoHeadBlock>\n  );\n}\n\nexport default TodoHead;","import React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { MdCheckBox, MdCheckBoxOutlineBlank, MdDelete, MdDone } from 'react-icons/md';\nimport { useTodoDispatch } from '../TodoContext';\n\nconst Remove = styled.div`\n  opacity: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #dee2e6;\n  font-size: 24px;\n  cursor: pointer;\n  &:hover {\n    color: #5c50f0;\n  }\n  @media only screen and (max-width: 525px) {\n    opacity: 1;\n  }\n`;\n\nconst CheckBox = styled.div`\n  display: flex;\n  margin-right: 20px;\n  font-size: 24px;\n  color: #ced4da;\n  cursor: pointer;\n  ${props => props.done && css`\n    color: #ff5768;\n  `}\n  @media only screen and (max-width: 525px) {\n    margin-right: 5px;\n  }\n`;\n\nconst Text = styled.div`\n  flex: 1;\n  font-size: 21px;\n  color: #82819e;\n  cursor: pointer;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n  ${props => props.done && css`\n    color: #cecede;\n    text-decoration: line-through;\n  `}\n`;\n\nconst Input = styled.input`\n  padding: 5px 12px;\n  width: 100%;\n  height: 42px;\n  border: 1px solid #dee9f1;\n  border-radius: 4px;\n  outline: none;\n  font-size: 18px;\n  box-sizing: border-box;\n`;\n\nconst Modify = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #5c4ff0;\n  font-size: 24px;\n  cursor: pointer;\n  padding: 0 5px;\n  background: none;\n  border: none;\n  outline: none;\n`\n\nconst TodoItemBlock = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 10px 32px;\n  height: 83px;\n  border-top: 1px solid #edf3f8;\n  box-sizing: border-box;\n  &:first-child {\n    border-top: 0;\n  }\n  &:hover {\n    ${Remove} {\n      opacity: 1;\n    }\n  }\n  @media only screen and (max-width: 525px) {\n    height: 72px;\n  }\n`;\n\nfunction TodoItem({ id, done, text }) {\n  const [selectedTodo, setSelectedTodo] = useState('');\n  const dispatch = useTodoDispatch();\n  const onToggle = () => dispatch({\n    type: 'TOGGLE',\n    id\n  });\n  const onRemove = () => dispatch({\n    type: 'REMOVE',\n    id\n  });\n  const onUpdate = (id, text) => {\n    dispatch({\n      type: 'UPDATE',\n      id,\n      text: text\n    });\n    setSelectedTodo('');\n  }\n  const onEdit = () => {\n    setSelectedTodo(text);\n  }\n  const onChange = e => setSelectedTodo(e.target.value);\n  return (\n    <TodoItemBlock>\n      <CheckBox done={done} onClick={onToggle}>\n        {done ? <MdCheckBox /> : <MdCheckBoxOutlineBlank/>}\n      </CheckBox>\n      <Text done={done} onClick={onEdit}>\n        {selectedTodo ? <Input onChange={onChange} value={selectedTodo} autoFocus /> : text}\n      </Text>\n      {\n        selectedTodo && \n        <Modify onClick={() => onUpdate(id, selectedTodo)}>\n          <MdDone />\n        </Modify>\n      }\n      <Remove onClick={onRemove}>\n        <MdDelete />\n      </Remove>\n    </TodoItemBlock>\n  );\n}\n\nexport default React.memo(TodoItem);","import React from 'react';\nimport styled from 'styled-components';\nimport { useTodoState } from '../TodoContext';\nimport TodoItem from './TodoItem';\n\nconst TodoListBlock = styled.div`\n  flex: 1;\n  padding: 30px 0 48px;\n  overflow-y: auto;\n  @media only screen and (max-width: 525px) {\n    padding: 15px 0 35px;\n  }\n`\n\nfunction TodoList() {\n  const todos = useTodoState();\n  return (\n    <TodoListBlock>\n      {todos.map(todo => <TodoItem key={todo.id} id={todo.id} text={todo.text} done={todo.done} />)}\n    </TodoListBlock>\n  );\n}\n\nexport default TodoList;","import React from 'react';\nimport styled from 'styled-components';\n\nconst TodoTemplateBlock = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  width: 480px;\n  height: 748px;\n  background: #fff;\n  border-radius: 10px;\n  box-shadow: 0 0 8px rgba(0, 0, 0, .04);\n  @media only screen and (max-width: 525px) {\n    flex-direction: normal;\n    width: 100%;\n    height: 95vh;\n  }\n  @media only screen and (orientation: landscape) {\n    margin: 0 auto;\n  }\n`;\n\nfunction TodoTemplate({ children }) {\n  return <TodoTemplateBlock>{children}</TodoTemplateBlock>;\n}\n\nexport default TodoTemplate;","import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport TodoCreate from './components/TodoCreate';\nimport TodoHead from './components/TodoHead';\nimport TodoList from './components/TodoList';\nimport TodoTemplate from './components/TodoTemplate';\nimport { TodoProvider } from './TodoContext';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    position: relative;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 5% 3%;\n    height: 100vh;\n    background: #5a4eeb;\n    box-sizing: border-box;\n    &:before {\n      content: '';\n      position: absolute;\n      left: 0;\n      bottom: 0;\n      width: 100%;\n      height: 40vh;\n      background: #ff616f;\n    }\n    #wave {\n      position: absolute;\n      left: 50%;\n      bottom: 39vh;\n      width: 100%;\n      transform: translateX(-50%);\n      fill: #ff616f;\n    }\n    @media only screen and (max-width: 525px) {\n      display: block;\n    }\n    @media only screen and (orientation: landscape) {\n      display: block;\n      height: auto;\n    }\n  }\n  \n`\n\nfunction App() {\n  return (\n    <TodoProvider>\n      <GlobalStyle />\n      <svg id=\"wave\" data-name=\"wave\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1401 180.42\">\n        <path d=\"M0,266.14S192.19,113.29,487.28,120.85c307.46,7.89,309.53,228.63,912.72,81.09V300H0Z\" transform=\"translate(0.5 -120.08)\"/>\n      </svg>\n      <TodoTemplate>\n        <TodoHead />\n        <TodoCreate />\n        <TodoList />\n      </TodoTemplate>\n    </TodoProvider>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}